<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "document-v12.dtd"><document>   <header>     <title>Serial Slave HOW-TO</title>    <version>1.1 (08/06/2004)</version>    <authors>      <person name="Dieter Wimberger" email=" wimpi@users.sourceforge.net "/>    </authors>  </header>   <body>     <section id="About">      <title>About</title>	  <p>	   This document is a tutorial for writing Modbus/Serial Slave applications utilizing        the <em>jamod</em> library. It explains the basics and walk's you through        a simple command line Slave implementation,that will serve the values from a        static process image on Master requests.<br/>       If you are new to Modbus, it is highly recommended to first take a look at <link href="../kbase/protocol.html"><em>Understanding        the Protocol</em></link> (especially the section about the Serial implementation) as well as the actual protocol specifications.       </p> 	  <warning>	    You will need the Java Communications API extension (<code>javax.comm</code>) installed to be able to run serial		modbus applications.<br/>	  </warning>	  <note>	   The application build in the tutorial is actually part of the distribution codebase	   (<link href="../api/net/wimpi/modbus/cmd/SerialSlaveTest.html"><code>net.wimpi.modbus.cmd.SerialSlaveTest</code></link>).	  </note>    </section>    <section id="whatisslave">	  <title>What is a Slave?</title>	  <p>        Thinking in terms of the Client-Server network computing paradigm, the Slave application         is a Server. It has a <em>Listener</em> for receiving an incoming <em>Request</em>        from the Master application (which indeed is a Client) and sends a corresponding <em>Response</em>,		just as described in <link href="../kbase/protocol.html"><em>Understanding the Protocol</em></link>.      </p>	 <p>	   In case of the serial implementation, the communication can be point-to-point        (RS232, 422, 485) or on a shared signal cable (RS 485). In both cases there can        be only one master, that acquires data from a source (data acquisition), or writes        data to a sink (device control) and one or multiple slaves.<br/>       A possible simple network setup for this tutorial is composed of two        nodes, as depicted in Figure 1.	 </p>	 <table>	    <caption>Figure 1: Network Setup</caption>        <tr>           <td><figure src="../images/serialslave_network_nodal.png" alt="Network setup" width="92" height="155"/></td>        </tr>      </table>	  <p>	    The implementation from the <em>jamod</em> library will automagically construct         the actual responses for requests related to the standard Modbus data model, according         to the contents of the actually set <em>Process Image</em>.<br/>		The reference to the actual <em>Process Image</em> is stored in the <em>Modbus Coupler</em> a singleton		instance accessible throughout the VM.	  </p>    </section>	<section id="whatisprocessimage">	  <title>What is a Process Image?</title>	  <p>	    A process image is basically a collection of <em>Discrete Inputs</em>, <em>Discrete Outputs (Coils)</em>,         <em>Input Registers</em> and <em>Registers</em>.<br/>	    Please refer to <link href="processimage.html"><em>Understanding the Process Image</em></link> for more information.	  </p>	</section>	<section id="classesofinterest">	  <title>Classes of Interest for the Developer</title>	  <p>	    The motivation for creating <em>jamod</em> was to achieve an intuitive and object 		oriented implementation of the Modbus protocol, in a way, that there is a natural mapping 		from the domain knowledge (i.e. Modbus protocol) to the abstract class model. <br/>		The important elements in the description above (<code>What is a Slave?</code>) have been 		highlighted and the following list represents the mapping between them and the classes from 		<em>jamod</em> that will be needed for a slave implementation:	  </p>      <ul>	    <li>		  <em>Listener</em>: <link href="../api/net/wimpi/modbus/net/ModbusSerialListener.html"><code>ModbusSerialListener</code></link>		</li>        <li>		  <em>Process Image</em>: <link href="../api/net/wimpi/modbus/procimg/ProcessImage.html"><code>ProcessImage</code></link>           (respectively it's direct known subclass <link href="../api/net/wimpi/modbus/procimg/SimpleProcessImage.html"><code>SimpleProcessImage</code></link>)		</li>        <li>		  <em>Discrete Inputs</em>: <link href="../api/net/wimpi/modbus/procimg/DigitalIn.html"><code>DigitalIn</code></link>           (respectively it's direct known subclass <link href="../api/net/wimpi/modbus/procimg/SimpleDigitalIn.html"><code>SimpleDigitalIn</code></link>)		</li>        <li>		  <em>Discrete Outputs</em>: <link href="../api/net/wimpi/modbus/procimg/SimpleDigitalOut.html"><code>DigitalOut</code></link>           (respectively it's direct known subclass <link href="../api/net/wimpi/modbus/procimg/SimpleDigitalOut.html"><code>SimpleDigitalOut</code></link>)		</li>        <li>		  <em>Input Registers</em>: <link href="../api/net/wimpi/modbus/procimg/InputRegister.html"><code>InputRegister</code></link>           (respectively it's direct known subclass <link href="../api/net/wimpi/modbus/procimg/SimpleInputRegister.html"><code>SimpleInputRegister</code></link>)		</li>        <li>		  <em>Registers</em>: <link href="../api/net/wimpi/modbus/procimg/Register.html"><code>Register</code></link>           (respectively it's direct known subclass <link href="../api/net/wimpi/modbus/procimg/SimpleRegister.html"><code>SimpleRegister</code></link>)		</li>        <li>		  <em>Modbus Coupler</em>: <link href="../api/net/wimpi/modbus/ModbusCoupler.html"><code>ModbusCoupler</code></link>		</li>      </ul>    </section>	<section id="implementation">	  <title>Implementation</title>	  <p>	    As the idea is to provide a tutorial in form of a very simple command line example,         it will consist of only one class and most of the work will be done in the entry         method (<code>public static void main(String args[])</code>). This is probably not         the way <em>jamod</em> will be usually employed in OO designs, but we hope 		it serves the demonstrative purpose.	  </p>	  <p>	    Now let's start writing code. We need a simple Java application skeleton, with         imports of all <em>jamod</em> packages:	  </p>	  <source>import net.wimpi.modbus.net.*;import net.wimpi.modbus.procimg.*;import net.wimpi.modbus.ModbusCoupler;import net.wimpi.modbus.util.SerialParameters;public class SerialSlaveTest {  public static void main(String[] args) {    try {      ...      ...    } catch (Exception ex) {      ex.printStackTrace();    }  }//main}//class SerialSlaveTest	  	  </source>	  <p>	    Next we add the instances and variables the application will need:	  </p>	  <source>/* The important instances and variables */ModbusSerialListener listener = null;SimpleProcessImage spi = null;portname = args[0]; //the portname of the serial port to listen to	  	  </source>	  <p>	    Next we will construct the process image and setup the coupler to         hold the reference:	  </p>	  <source>//1. Prepare a process imagespi = new SimpleProcessImage();spi.addDigitalOut(new SimpleDigitalOut(true));spi.addDigitalOut(new SimpleDigitalOut(false));spi.addDigitalIn(new SimpleDigitalIn(false));spi.addDigitalIn(new SimpleDigitalIn(true));spi.addDigitalIn(new SimpleDigitalIn(false));spi.addDigitalIn(new SimpleDigitalIn(true));spi.addRegister(new SimpleRegister(251));spi.addInputRegister(new SimpleInputRegister(45)); //2. Create the coupler and set the slave identity ModbusCoupler.createModbusCoupler(spi); ModbusCoupler.getReference().setUnitID(1);	  	  </source>	  <note>	    It should be relatively easy to create your own classes of process image related instances.		These might even use the Java Native Interface (JNI) to directly access specific hardware,		and expose their state as register, input register, input discrete or coil.	  </note>	  <p>	    We will also need to setup the parameters for the serial communication:	  </p>	  <source>//3. Set up serial parametersSerialParameters params = new SerialParameters();params.setPortName(portname);params.setBaudRate(115200);params.setDatabits(7);params.setParity("None");params.setStopbits(2);	  </source>	  <note>	    You should adapt the serial parameters to your requirements, which you can do hardcoded or by reading in the parameters		from the commandline or as properties file.	  </note>	  <p>	    Last step is to create and start the listener:	  </p>      <source>//4. Set up serial listenerlistener = new ModbusSerialListener(params);listener.setListening(true);	  	  </source>		  <p>	    This will do the job. You can test the slave using the master application from         the <link href="serial_master_howto.html"><em>Serial Master HOW-TO</em></link>, be         sure to use equal communication parameters on both sides. 	  </p>	  <note>	    The debug outputs of the library can be activated by passing the property 	    <code>net.wimpi.modbus.debug</code> and allow to see the actually exchanged modbus messages 	    encoded as hex.	  </note>	</section>   </body></document>