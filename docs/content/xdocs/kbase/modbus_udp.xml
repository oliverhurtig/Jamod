<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "document-v12.dtd"><document>   <header>     <title>Modbus UDP Specification</title>    <version>1.1 (08/06/2004)</version>    <authors>      <person name="Dieter Wimberger" email=" wimpi@users.sourceforge.net "/>    </authors>  </header>   <body>    <section id="About">      <title>About</title>	  <p>	    This document introduces a Modbus/UDP flavor which we have developed to verify	    if the Modbus protocol is suited for the use of UDP/IP as lower level communication	    stack as the protocol:      </p>	  <ol>        <li>is stateless,</li>        <li>transaction oriented</li>        <li>	      and the package size is limited to 256 bytes, which should be easily           transferable over any IP capable link (including IP over Serial) without           the necessity to split the package.	    </li>      </ol>	  <p>	    We succeeded with a relatively simple design and implementation	    and are convinced that a Modbus/UDP flavor is an interesting 	    approach for reducing the traffic overhead, achieving high throughput performance.	  </p>    </section>    <section>      <title>Protocol &amp; Specification</title>	  <p>	    That's the beauty of the thing, basically we have <strong>not changed anything</strong> of the Modbus 		application level (and TCP) specification but how messages are transported.	  </p>	  <p>	    This means that the IP specific header (called MBAP in the specification) is exactly 		the same as for Modbus/TCP. It's 7 bytes long and composed of the following fields: 	  </p>      <ol>        <li>		  the <em>invocation identification</em> (2 bytes) used for transaction pairing; formerly           called <em>transaction identifier</em>		</li>        <li>		  the <em>protocol identifier</em> (2 bytes), is 0 for Modbus by default; reserved           for future extensions		</li>        <li>		  the <em>length</em> (2 bytes), a byte count of all following bytes		</li>		<li>		  the <em>unit identifier</em> (1 byte) used to identify a remote unit located           on a non-TCP/IP network		</li>      </ol>	  <p>	    Also nothing has changed about possible network setups. They are not really by the specification; 		it is possible to setup multi-master systems or realize bidirectional communication 		(i.e. have nodes that are master and slave at the same time). However, the user should be		well aware that there are implications from deviations of the Master/Slave schema.	  </p>	  </section>	  <section id="ajoke">	    <title>This is a joke right?</title>		<p>		  <strong>Definately not. It is and has been as easy as this and it works great.</strong>		</p>		<p>	      <em>So what is new?</em><br/>		  Well, only the implementation. Messages are unicast between nodes on the		  network, with two packages (a <em>Request</em> and a <em>Response</em> package/message) per transaction.	    </p>	    <p>	      <em>And what about UDP being an</em> <strong>unreliable</strong> transport?<br/>		  Well, the protocol is transaction oriented. If a package get's lost, the transaction will not		  be successfully executed. Thus, the master will know and can decide whether to retry it (a given		  number of times for example) or give up.	    </p>		<p>		  <em>I still don't believe it?!</em><br/>		  Right. That's why we have implemented it and added some examples to the <em>jamod</em> library.		  Please see yourself:		</p>		<ul>		  <li>		    Modbus/UDP Slave: <link href="../development/udp_slave_howto.html">UDP Slave How-To</link>	      </li>		  <li>		    Modbus/UDP Master: <link href="../development/udp_master_howto.html">UDP Master How-To</link>	      </li>		</ul>		<p>		  You are also more then welcome to check out the source code.		</p>    </section>  </body></document>